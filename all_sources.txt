#include "minishell.h"

int count_strings(char **arr)
{
    int i;

    i = 0;
    while (arr && arr[i])
        i++;
    return (i);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   controller.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kievaughn <kievaughn@student.42.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/13 18:22:38 by dimendon          #+#    #+#             */
/*   Updated: 2025/07/01 17:37:56 by kievaughn        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "libft/libft.h"

int run_builtin(char ***envp, char **cmd)
{
    if (!ft_strncmp(cmd[0], "echo", 5))
        last_exit_code = custom_echo(cmd);
    else if (!ft_strncmp(cmd[0], "cd", 3))
        last_exit_code = custom_cd(envp, cmd);
    else if (!ft_strncmp(cmd[0], "pwd", 4))
        last_exit_code = custom_pwd();
    else if (!ft_strncmp(cmd[0], "export", 7))
        last_exit_code = custom_export(envp, cmd);
    else if (!ft_strncmp(cmd[0], "unset", 6))
        last_exit_code = custom_unset(envp, cmd);
    else if (!ft_strncmp(cmd[0], "env", 4))
        last_exit_code = custom_env(*envp);
    else if (!ft_strncmp(cmd[0], "exit", 5))
    {
        last_exit_code = custom_exit(cmd);
        if (last_exit_code != 1)
            exit(last_exit_code);
    }
    else
        last_exit_code = 127;

    return (last_exit_code);
}


static void run_single(char ***envp, char *segment)
{
    char **cmd;
    char *path;
    int in_fd;
    int out_fd;
    int save_in;
    int save_out;

    in_fd = STDIN_FILENO;
    out_fd = STDOUT_FILENO;
    cmd = tokenize_command(segment, ' ', *envp);
    if (!cmd)
        return ;
    cmd = handle_redirections(cmd, &in_fd, &out_fd);
    if (!cmd || !cmd[0])
    {
        free_cmd(cmd);
        return ;
    }

    save_in = dup(STDIN_FILENO);
    save_out = dup(STDOUT_FILENO);
    if (in_fd != STDIN_FILENO)
    {
        dup2(in_fd, STDIN_FILENO);
        close(in_fd);
    }
    if (out_fd != STDOUT_FILENO)
        dup2(out_fd, STDOUT_FILENO);

    if (is_builtin(cmd[0]))
        run_builtin(envp, cmd);
    else
    {
        path = get_path(*envp, cmd);
        if (path)
        {
            last_exit_code = execute_command(path, cmd, *envp);
            free(path);
        }
        else
        {
            printf("Command not found: %s\n", cmd[0]);
            last_exit_code = 127;
        }
    }

    if (out_fd != STDOUT_FILENO)
    {
        close(out_fd);
        dup2(save_out, STDOUT_FILENO);
    }
    if (in_fd != STDIN_FILENO)
        dup2(save_in, STDIN_FILENO);
    close(save_in);
    close(save_out);

    free_cmd(cmd);
}

short int is_builtin(const char *cmd)
{
    return (
        ft_strncmp(cmd, "echo", 5) == 0 ||
        ft_strncmp(cmd, "cd", 3) == 0 ||
        ft_strncmp(cmd, "pwd", 4) == 0 ||
        ft_strncmp(cmd, "export", 7) == 0 ||
        ft_strncmp(cmd, "unset", 6) == 0 ||
        ft_strncmp(cmd, "env", 4) == 0 ||
        ft_strncmp(cmd, "exit", 5) == 0
    );
}

void process_command(char ***envp, char *line)
{
    char **segments;
    int count;

    segments = split_pipes(line);
    if (!segments)
        return ;
    count = count_strings(segments);
    if (count > 1)
        execute_pipeline(*envp, segments);
    else
        run_single(envp, segments[0]);
    free_cmd(segments);
}
#include "minishell.h"

static void     child_process(
        char **envp, char **cmd, int in_fd, int *fd, int last
)
{
        int     redir_in;
        int     redir_out;

        redir_in = STDIN_FILENO;
        redir_out = STDOUT_FILENO;
        cmd = handle_redirections(cmd, &redir_in, &redir_out);
        if (redir_in != STDIN_FILENO)
        {
                dup2(redir_in, STDIN_FILENO);
                close(redir_in);
        }
        else if (in_fd != STDIN_FILENO)
        {
                dup2(in_fd, STDIN_FILENO);
                close(in_fd);
        }
        if (!last && redir_out == STDOUT_FILENO)
                dup2(fd[1], STDOUT_FILENO);
        else if (redir_out != STDOUT_FILENO)
                dup2(redir_out, STDOUT_FILENO);
        if (!last)
        {
                close(fd[0]);
                close(fd[1]);
        }
        if (redir_out != STDOUT_FILENO)
                close(redir_out);
        execute_cmd(envp, cmd);
}


static int	pipeline_step(
	char **envp, char **segments, pid_t *pids,
	int *in_fd, int *fd, int i, int num
)
{
	char	**cmd;

	if (i < num - 1 && pipe(fd) == -1)
	{
		perror("pipe");
		return (0);
	}
	cmd = tokenize_command(segments[i], ' ', envp);
	if (!cmd || !cmd[0])
	{
		free_cmd(cmd);
		if (i < num - 1)
			close_pipe(fd);
		return (1);
	}
	pids[i] = fork();
	if (pids[i] == 0)
		child_process(envp, cmd, *in_fd, fd, i == num - 1);
	free_cmd(cmd);
	parent_cleanup(in_fd, fd, i, num);
	return (1);
}

static void	pipeline_loop(
	char **envp, char **segments, pid_t *pids, int num
)
{
	int	in_fd;
	int	fd[2];
	int	i;

	in_fd = STDIN_FILENO;
	i = 0;
	while (i < num)
	{
		if (!pipeline_step(envp, segments, pids, &in_fd, fd, i, num))
			break ;
		i++;
	}
	if (in_fd != STDIN_FILENO)
		close(in_fd);
}

void	execute_pipeline(char **envp, char **segments)
{
	int		num;
	pid_t	*pids;

	num = count_strings(segments);
	pids = malloc(sizeof(pid_t) * num);
	if (!pids)
		return ;
	pipeline_loop(envp, segments, pids, num);
	wait_for_all(pids, num);
	free(pids);
}
#include "minishell.h"
#include "../libft/libft.h"
#include <fcntl.h>
#include <readline/readline.h>

static void open_infile(char *file, int *in_fd)
{
    int fd;

    if (*in_fd != STDIN_FILENO)
        close(*in_fd);
    fd = open(file, O_RDONLY);
    if (fd < 0)
        perror(file);
    else
        *in_fd = fd;
}

static void open_outfile(char *file, int *out_fd)
{
    int fd;

    if (*out_fd != STDOUT_FILENO)
        close(*out_fd);
    fd = open(file, O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (fd < 0)
        perror(file);
    else
        *out_fd = fd;
}

static void open_appendfile(char *file, int *out_fd)
{
    int fd;

    if (*out_fd != STDOUT_FILENO)
        close(*out_fd);
    fd = open(file, O_WRONLY | O_CREAT | O_APPEND, 0644);
    if (fd < 0)
        perror(file);
    else
        *out_fd = fd;
}

static int open_heredoc(const char *delim)
{
    int  pipefd[2];
    char *line;

    if (pipe(pipefd) == -1)
    {
        perror("pipe");
        return (-1);
    }
    while (1)
    {
        line = readline("> ");
        if (!line || ft_strcmp(line, delim) == 0)
        {
            free(line);
            break;
        }
        write(pipefd[1], line, ft_strlen(line));
        write(pipefd[1], "\n", 1);
        free(line);
    }
    close(pipefd[1]);
    return (pipefd[0]);
}

static void handle_heredoc(const char *delim, int *in_fd)
{
    int h = open_heredoc(delim);

    if (h >= 0)
    {
        if (*in_fd != STDIN_FILENO)
            close(*in_fd);
        *in_fd = h;
    }
}

char **handle_redirections(char **cmd, int *in_fd, int *out_fd)
{
    int     i = 0;
    int     j = 0;
    int     cnt = count_strings(cmd);
    char  **clean = malloc(sizeof(char *) * (cnt + 1));

    if (!clean)
        return (NULL);
    while (cmd[i])
    {
        if (!ft_strcmp(cmd[i], "<") && cmd[i + 1])
            open_infile(cmd[i + 1], in_fd), i += 2;
        else if (!ft_strcmp(cmd[i], "<<") && cmd[i + 1])
            handle_heredoc(cmd[i + 1], in_fd), i += 2;
        else if (!ft_strcmp(cmd[i], ">") && cmd[i + 1])
            open_outfile(cmd[i + 1], out_fd), i += 2;
        else if (!ft_strcmp(cmd[i], ">>") && cmd[i + 1])
            open_appendfile(cmd[i + 1], out_fd), i += 2;
        else
            clean[j++] = cmd[i++];
    }
    clean[j] = NULL;
    free(cmd);
    return (clean);
}
#include "minishell.h"

void execute_cmd(char **envp, char **cmd)
{
    char *path;
    if (is_builtin(cmd[0]))
    {
        run_builtin(&envp, cmd);
        free_cmd(cmd);
        exit(last_exit_code);
    }
    path = get_path(envp, cmd);
    if (path)
    {
        execve(path, cmd, envp);
        perror("execve");
        free(path);
        last_exit_code = 126;
    }
    else
    {
        fprintf(stderr, "Command not found: %s\n", cmd[0]);
        last_exit_code = 127;
    }
    free_cmd(cmd);
    exit(last_exit_code);
}

void close_pipe(int *fd)
{
    close(fd[0]);
    close(fd[1]);
}

void parent_cleanup(
    int *in_fd, int *fd, int i, int num
)
{
    if (*in_fd != STDIN_FILENO)
        close(*in_fd);
    if (i < num - 1)
    {
        close(fd[1]);
        *in_fd = fd[0];
    }
}

void wait_for_all(pid_t *pids, int count)
{
    int i = 0;
    int status;
    while (i < count)
    {
        if (waitpid(pids[i], &status, 0) == -1)
            perror("waitpid");
        if (i == count - 1)
        {
            if (WIFEXITED(status))
                last_exit_code = WEXITSTATUS(status);
            else if (WIFSIGNALED(status))
                last_exit_code = 128 + WTERMSIG(status);
            else
                last_exit_code = 1;
        }
        i++;
    }
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strnstr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:49 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/12 14:18:49 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strnstr(const char *str, const char *to_find, size_t len)
{
	char	*ret;
	size_t	i;
	size_t	size_tf;

	if (!str && len == 0)
		return (NULL);
	if (*to_find == '\0')
		return ((char *)str);
	size_tf = 0;
	while (to_find[size_tf] != '\0')
		size_tf++;
	while (*str != '\0' && len >= size_tf)
	{
		ret = (char *)str;
		i = 0;
		while (str[i] == to_find[i])
		{
			i++;
			if (i == size_tf)
				return (ret);
		}
		str++;
		len--;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isdigit.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:50 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:20 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isdigit(int number)
{
	if (((number < 48 || number > 57)))
		return (0);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putstr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 13:15:12 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/12 17:02:42 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putstr_fd(char *s, int fd)
{
	char	*ptr;
	int		strlen;

	if (!s)
		return ;
	if (fd < 0)
		return ;
	ptr = s;
	strlen = 0;
	while (*ptr != '\0')
	{
		ptr++;
		strlen++;
	}
	write(fd, s, strlen);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_front_bonus.c                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 19:40:21 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 18:33:14 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstadd_front(t_list **lst, t_list *new)
{
	if (!new)
		return ;
	new->next = *lst;
	*lst = new;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstdelone_bonus.c                               :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/13 13:20:55 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 18:33:13 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstdelone(t_list *lst, void (*del)(void *))
{
	if (lst == NULL || del == NULL)
		return ;
	del(lst->content);
	free(lst);
}

void	del(void *content)
{
	if (content)
		free(content);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstadd_back_bonus.c                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/13 12:47:02 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 18:33:37 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstadd_back(t_list **lst, t_list *new)
{
	t_list	*aux;

	if (!*lst)
		*lst = new;
	else
	{
		aux = *lst;
		while (aux->next != NULL)
			aux = aux->next;
		aux->next = new;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcpy.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:55 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:46 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)
{
	const char	*s;
	size_t		src_len;
	size_t		i;

	s = src;
	src_len = 0;
	while (s[src_len])
		src_len++;
	if (dstsize == 0)
		return (src_len);
	i = 0;
	while (i < dstsize - 1 && (src[i]))
	{
		dst[i] = s[i];
		i++;
	}
	dst[i] = '\0';
	return (src_len);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlen.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:53 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:48 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlen(const char *input)
{
	size_t	len;

	len = 0;
	while (*input != '\0')
	{
		len++;
		input++;
	}
	return (len);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstmap_bonus.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/13 15:46:12 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 18:33:10 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))
{
	t_list	*newlist;
	t_list	*newnode;
	void	*modcontent;

	if (lst == NULL || f == NULL || del == NULL)
		return (NULL);
	newlist = NULL;
	newnode = NULL;
	while (lst != NULL)
	{
		modcontent = f(lst->content);
		newnode = ft_lstnew(modcontent);
		if (newnode == NULL)
		{
			ft_lstclear(&newlist, del);
			return (NULL);
			free(newlist);
		}
		ft_lstadd_back(&newlist, newnode);
		lst = lst->next;
	}
	return (newlist);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcmp.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:40 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:31 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_memcmp(const void *ptr1, const void *ptr2, size_t num)
{
	const unsigned char	*p1 = (const unsigned char *)ptr1;
	const unsigned char	*p2 = (const unsigned char *)ptr2;
	size_t				i;

	i = 0;
	while (i < num)
	{
		if (p1[i] != p2[i])
			return (p1[i] - p2[i]);
		else
			i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtok.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/26 17:15:20 by dimendon          #+#    #+#             */
/*   Updated: 2025/03/26 17:15:24 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strtok(char *str, const char delim)
{
	static char	*input;
	char		*start;

	if (str)
		input = str;
	if (!input)
		return (NULL);
	while (*input != '\0' && *input == delim)
		input++;
	if (*input == '\0')
		return (NULL);
	start = input;
	while (*input != '\0' && *input != delim)
		input++;
	if (*input == delim)
	{
		*input = '\0';
		input++;
	}
	if (*input == '\0')
		input = NULL;
	return (start);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_is_str_num.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/04 20:29:49 by dimendon          #+#    #+#             */
/*   Updated: 2025/06/04 20:54:32 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int ft_is_str_num(const char *str) 
{
    int i;
    int len;

    i = 0;
    len = 0;
    if (!str || *str == '\0')
        return (0);
    if ((str[0] == '+' || str[0] == '-') && str[1] != '\0')
        i = 1;
    while (str[i] == '0')
        i++;
    while (str[i] && ft_isdigit(str[i]))
    {
        len++;
        i++;
    }
    if (len == 0 && str[i-1] == '0')
        len = 1;

    if (str[i] != '\0')
        return (0);

    return (len);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putnbr_fd.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 13:03:48 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/12 18:36:34 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static void	ft_printbackwards(char *converted, int fd)
{
	int	i;

	i = 0;
	while (*converted != '\0')
	{
		i++;
		converted++;
	}
	while (i > 0)
	{
		converted--;
		write(fd, &*converted, 1);
		i--;
	}
}

static void	assignvalues(char *s, int n)
{
	int	i;

	i = 0;
	while (n != 0)
	{
		s[i] = (n % 10) + 48;
		n = n / 10;
		i++;
	}
	s[i] = '\0';
}

void	ft_putnbr_fd(int n, int fd)
{
	char	nbtoch[11];

	if (n == -2147483648)
	{
		write(fd, "-2147483648", 11);
		return ;
	}
	else if (n < 0)
	{
		n = n * (-1);
		write(fd, "-", 1);
	}
	else if (n == 0)
	{
		write(fd, "0", 1);
		return ;
	}
	assignvalues(nbtoch, n);
	ft_printbackwards(nbtoch, fd);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:31 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:39 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strchr(const char *input, int findascii)
{
	findascii %= 256;
	while (*input)
	{
		if (*input == findascii)
			return ((char *)input);
		input++;
	}
	if (findascii == 0)
	{
		return ((char *)input);
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_striteri.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 13:08:49 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 17:18:53 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_striteri(char *s, void (*f)(unsigned int, char *))
{
	unsigned int	i;

	if (!s || !f)
		return ;
	i = 0;
	while (s[i] != '\0')
	{
		f(i, &s[i]);
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_bzero.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:59 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:12 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_bzero(void *s, size_t n)
{
	unsigned char	*p;
	size_t			i;

	p = (unsigned char *)s;
	i = 0;
	while (i < n)
	{
		p[i] = (unsigned char)0;
		i++;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strjoin.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:59 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:43 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strjoin(char const *s1, char const *s2)
{
	char	*ret;
	size_t	totalsize;

	totalsize = ft_strlen(s1) + ft_strlen(s2) + 1;
	ret = malloc(totalsize);
	if (!ret)
		return (NULL);
	ft_bzero(ret, totalsize);
	ft_strlcpy(ret, s1, totalsize);
	ft_strlcat(ret, s2, totalsize);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isascii.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:51 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:18 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isascii(int input)
{
	if (input < 0 || input > 127)
		return (0);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memcpy.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:38 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/12 14:20:08 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memcpy(void *dest, const void *src, size_t n)
{
	unsigned char	*d;
	unsigned char	*s;
	size_t			i;

	d = (unsigned char *)dest;
	s = (unsigned char *)src;
	i = 0;
	if (!dest && !src)
		return (NULL);
	while (i < n)
	{
		d[i] = s[i];
		i++;
	}
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstclear_bonus.c                                :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/13 15:32:50 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 18:33:13 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstclear(t_list **lst, void (*del)(void *))
{
	t_list	*temp;

	if (lst == NULL || del == NULL)
		return ;
	while (*lst != NULL)
	{
		temp = *lst;
		*lst = (*lst)->next;
		del(temp->content);
		free(temp);
	}
}

void	del(void *content)
{
	if (content)
		free(content);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isprint.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:48 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:22 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isprint(int input)
{
	if (input < 32 || input > 126)
		return (0);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putendl_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 13:03:56 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/12 17:06:52 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putendl_fd(char *s, int fd)
{
	if (!s)
		return ;
	if (fd < 0)
		return ;
	ft_putstr_fd(s, fd);
	write(fd, "\n", 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_toupper.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:14 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 17:19:20 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_toupper(int input)
{
	if (input < 97 || input > 122)
		return (input);
	return (input - 32);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstiter_bonus.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/13 15:45:45 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 18:33:12 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_lstiter(t_list *lst, void (*f)(void *))
{
	while (lst != NULL)
	{
		f(lst->content);
		lst = lst->next;
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_split.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:33 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 17:18:45 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static size_t	skipc(const char *input, const char c, size_t pos)
{
	while (input[pos] == c)
		pos++;
	return (pos);
}

static size_t	ft_substrlen(const char *input, const char c, unsigned int pos,
		unsigned int lastchar)
{
	size_t	len;

	len = 0;
	while (input[pos] == c && pos < lastchar)
		pos++;
	while (input[pos] != c && pos < lastchar)
	{
		len++;
		pos++;
	}
	return (len);
}

static unsigned int	countwords(const char *s, const char c,
		unsigned int lastchar)
{
	unsigned int	i;
	unsigned int	words;

	i = 0;
	words = 0;
	while (s[i])
	{
		while (s[i] == c && i < lastchar)
			i++;
		if (s[i] != c && i < lastchar)
		{
			words++;
			while (s[i] != c && i < lastchar)
				i++;
		}
	}
	return (words);
}

static char	**free_words(char **words, unsigned int i)
{
	while (i > 0)
		free(words[--i]);
	free(words);
	return (NULL);
}

char	**ft_split(const char *s, char c)
{
	char			**words;
	unsigned int	nrwords;
	unsigned int	pos;
	unsigned int	sublen;
	unsigned int	i;

	nrwords = countwords(s, c, ft_strlen(s));
	words = malloc((nrwords + 1) * sizeof(char *));
	if (!words)
		return (NULL);
	pos = 0;
	i = 0;
	while (i < nrwords)
	{
		sublen = ft_substrlen(s, c, pos, ft_strlen(s));
		words[i] = malloc(sublen + 1);
		if (!words[i])
			return (free_words(words, i));
		pos = skipc(s, c, pos) + sublen;
		ft_strlcpy(words[i], s + (pos - sublen), sublen + 1);
		i++;
	}
	words[i] = NULL;
	return (words);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strrchr.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:44 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:54 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strrchr(const char *input, int findascii)
{
	int	size;

	size = 0;
	while (input[size])
		size++;
	findascii %= 256;
	while (size >= 0)
	{
		if (input[size] == findascii)
			return ((char *)(input + size));
		size--;
	}
	return (NULL);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstlast_bonus.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/13 12:31:11 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 18:33:11 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

t_list	*ft_lstlast(t_list *lst)
{
	if (lst == NULL)
		return (NULL);
	while (lst->next != NULL)
		lst = lst->next;
	return (lst);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalpha.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:53 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/15 13:55:21 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalpha(int letter)
{
	if (((letter < 65 || letter > 90) && (letter < 97 || letter > 122)))
		return (0);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memchr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:41 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:29 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memchr(const void *ptr, int value, size_t num)
{
	const unsigned char	*p = (const unsigned char *)ptr;
	size_t				i;

	i = 0;
	while (i < num)
	{
		if (p[i] == (unsigned char)value)
			return ((void *)(p + i));
		else
			i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_putchar_fd.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 13:04:02 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/12 17:03:55 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	ft_putchar_fd(char c, int fd)
{
	if (fd < 0)
		return ;
	write(fd, &c, 1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memset.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:34 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:36 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_memset(void *s, int c, size_t n)
{
	unsigned char	*p;
	size_t			i;

	p = (unsigned char *)s;
	i = 0;
	while (i < n)
	{
		p[i] = (unsigned char)c;
		i++;
	}
	return (p);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_substr.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/05 15:19:03 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:58 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_substr(char const *s, unsigned int start, size_t len)
{
	char			*substr;
	unsigned int	size;
	size_t			remain;
	size_t			i;

	if (!s)
		return (NULL);
	size = ft_strlen(s);
	if (start >= size)
		return (ft_strdup(""));
	else
	{
		remain = size - start;
		if (remain > len)
			remain = len;
		substr = malloc(remain + 1);
		if (substr == NULL)
			return (NULL);
		i = 0;
		while (i < remain)
			substr[i++] = s[start++];
		substr[i] = '\0';
	}
	return (substr);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strncmp.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:50 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/12 14:04:50 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_strncmp(const char *s1, const char *s2, size_t n)
{
	unsigned int	i;

	i = 0;
	while (i < n && (s1[i] != '\0' || s2[i] != '\0'))
	{
		if (s1[i] != s2[i])
			return ((unsigned char)s1[i] - s2[i]);
		else
			i++;
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:55:01 by dimendon          #+#    #+#             */
/*   Updated: 2025/06/04 20:26:55 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

#include <ctype.h>
#include <limits.h>

int checkoverflow(const char *str, int *i, int sign, long long *result)
{
    long long res;
    int digit;

    res = *result;
    while (str[*i] >= '0' && str[*i] <= '9')
	{
        digit = str[*i] - '0';
        if (sign == 1) {
            if (res > (LLONG_MAX - digit) / 10)
                return (0);
        } else {
            if ((unsigned long long)res > ((unsigned long long)(-(LLONG_MIN + digit))) / 10)
                return (0);
        }
        res = res * 10 + digit;
        (*i)++;
    }
    *result = res;
    return (1);
}

int ft_atoany(const char *str, long long *out)
{
    long long result;
    int sign;
    int i;

    result = 0;
    sign = 1;
    i = 0;
    while (str[i] == ' ' || (str[i] >= 9 && str[i] <= 13))
        i++;
    if (str[i] == '+' || str[i] == '-')
    {
        if (str[i] == '-')
            sign = -1;
        i++;
    }
    if (str[i] < '0' || str[i] > '9')
        return 0;
    if (!checkoverflow(str, &i, sign, &result))
        return 0;
    *out = result * sign;
    return (1);
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strcatrealloc.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/03/26 17:15:10 by dimendon          #+#    #+#             */
/*   Updated: 2025/06/23 19:57:15 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char *ft_strcatrealloc(char *src, const char *new)
{
    char    *newdata;
    int     src_len;
    int     new_len;

    if (!src)
    {
        src = malloc(1);
        if (!src)
            return (NULL);
        src[0] = '\0';
    }
    src_len = ft_strlen(src);
    new_len = ft_strlen(new);
    newdata = malloc(src_len + new_len + 1);
    if (!newdata)
    {
        free(src);
        return (NULL);
    }
    ft_memcpy(newdata, src, src_len);
    ft_memcpy(newdata + src_len, new, new_len + 1);
    free(src);
    return (newdata);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strmapi.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 17:26:41 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 17:19:03 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))
{
	unsigned int	slen;
	char			*ret;
	unsigned int	i;

	if (!s || !f)
		return (NULL);
	slen = ft_strlen(s);
	ret = malloc(slen + 1);
	if (!ret)
		return (NULL);
	i = 0;
	while (i < slen)
	{
		ret[i] = f(i, s[i]);
		i++;
	}
	ret[i] = '\0';
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strtrim.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:39 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 17:19:11 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static short int	checkset(const char s1, const char *set, size_t setsize)
{
	size_t	i;

	i = 0;
	while (i < setsize)
	{
		if (s1 == set[i])
			return (1);
		i++;
	}
	return (0);
}

char	*ft_strtrim(char const *s1, char const *set)
{
	char	*ret;
	size_t	totalsize;
	size_t	fw;
	size_t	i;

	totalsize = ft_strlen(s1);
	fw = 0;
	while (checkset(s1[fw], set, ft_strlen(set)) == 1)
		fw++;
	while (checkset(s1[totalsize - 1], set, ft_strlen(set)) == 1)
		totalsize--;
	if (fw >= totalsize)
		return (ft_strdup("\0"));
	ret = malloc((totalsize - fw) + 1);
	if (!ret)
		return (NULL);
	i = 0;
	while (i < (totalsize - fw))
	{
		ret[i] = s1[i + fw];
		i++;
	}
	ret[i] = '\0';
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstsize_bonus.c                                 :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/13 12:16:24 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 18:33:09 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_lstsize(t_list *lst)
{
	int	count;

	count = 0;
	while (lst != NULL)
	{
		lst = lst->next;
		count++;
	}
	return (count);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_memmove.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:36 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/12 14:42:20 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	passvalues(void *dest, const void *src, size_t n)
{
	unsigned char		*d;
	const unsigned char	*s;
	size_t				i;

	i = 0;
	d = (unsigned char *)dest;
	s = (const unsigned char *)src;
	if (d < s)
	{
		while (i < n)
		{
			d[i] = s[i];
			i++;
		}
	}
	else
	{
		i = n;
		while (i > 0)
		{
			d[i - 1] = s[i - 1];
			i--;
		}
	}
}

void	*ft_memmove(void *dest, const void *src, size_t n)
{
	if (!dest && !src)
		return (NULL);
	passvalues(dest, src, n);
	return (dest);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_lstnew_bonus.c                                  :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/12 18:45:53 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/13 18:33:10 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

t_list	*ft_lstnew(void *content)
{
	t_list	*p;

	p = malloc(sizeof(t_list));
	if (!p)
		return (NULL);
	p->content = content;
	p->next = NULL;
	return (p);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strlcat.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:57 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:45 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

size_t	ft_strlcat(char *dst, const char *src, size_t dstsize)
{
	size_t	src_len;
	size_t	dest_len;
	size_t	i;

	src_len = 0;
	while (src[src_len])
		src_len++;
	dest_len = 0;
	while (dest_len < dstsize && dst[dest_len])
		dest_len++;
	if (dest_len == dstsize)
		return (dest_len + src_len);
	i = 0;
	while (src[i] && (dest_len + i + 1) < dstsize)
	{
		dst[dest_len + i] = src[i];
		i++;
	}
	if ((dest_len + i) < dstsize)
		dst[dest_len + i] = '\0';
	return (dest_len + src_len);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_calloc.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:57 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:13 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

void	*ft_calloc(size_t num, size_t size)
{
	size_t	totalsize;
	char	*p;

	totalsize = num * size;
	if (num != 0 && totalsize / num != size)
		return (NULL);
	p = malloc(num * size);
	if (p == NULL)
		return (NULL);
	ft_bzero(p, num * size);
	return (p);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_strdup.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:29 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 19:34:29 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

char	*ft_strdup(const char *src)
{
	char	*dupe;
	int		size;

	size = 0;
	while (src[size])
	{
		size++;
	}
	dupe = malloc(size + 1);
	if (!dupe)
		return (NULL);
	size = 0;
	while (*src)
	{
		dupe[size] = *src;
		src++;
		size++;
	}
	dupe[size] = '\0';
	return (dupe);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_atoi.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:55:01 by dimendon          #+#    #+#             */
/*   Updated: 2025/06/04 20:26:55 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_atoi(const char *str)
{
	int	ret;
	int	sign;
	int	i;

	i = 0;
	ret = 0;
	sign = 1;
	while (str[i] == ' ' || (str[i] >= 9 && str[i] <= 13))
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign = -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		ret = (ret * 10) + str[i] - '0';
		i++;
	}
	return (ret * sign);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_isalnum.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:55 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:55:15 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_isalnum(int input)
{
	if (((input < 65 || input > 90) && (input < 97 || input > 122)
			&& (input < 48 || input > 57)))
		return (0);
	return (1);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_itoa.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:54:45 by dimendon          #+#    #+#             */
/*   Updated: 2025/06/13 15:46:51 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

static unsigned int	getsize(long n)
{
	unsigned int	size = 0;

	if (n == 0)
		return (1);
	while (n != 0)
	{
		n = n / 10;
		size++;
	}
	return (size);
}

static void	passtostring(unsigned int size, unsigned int n, char *s,
		short int isnegative)
{
	if (isnegative == 1)
	{
		s[0] = '-';
		while (size > 1)
		{
			s[size - 1] = (n % 10) + '0';
			n = n / 10;
			size--;
		}
	}
	else
	{
		while (size > 0)
		{
			s[size - 1] = (n % 10) + '0';
			n = n / 10;
			size--;
		}
	}
}

char	*ft_itoa(int n)
{
	char			*ret;
	unsigned int	size;
	long			num;
	short int		isnegative;

	num = n;
	isnegative = 0;
	if (num < 0)
	{
		isnegative = 1;
		num = -num;
	}
	size = getsize(num) + isnegative;
	ret = ft_calloc(size + 1, sizeof(char));
	if (!ret)
		return (NULL);
	passtostring(size, num, ret, isnegative);
	return (ret);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_tolower.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/11/11 16:47:31 by dimendon          #+#    #+#             */
/*   Updated: 2024/11/11 16:56:00 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "libft.h"

int	ft_tolower(int input)
{
	if (input < 65 || input > 90)
		return (input);
	return (input + 32);
}
#include <libft.h>

int	ft_strcmp(char *s1, const char *s2)
{
	int i;

	i = 0;
	while (s1[i] == s2[i] && s1[i] != '\0' && s2[i] != '\0')
		i++;
	return (s1[i] - s2[i]);
}#include "minishell.h"
#include "../libft/libft.h"

int     is_valid_name(const char *name)
{
	int	i;

	if (!name || !name[0])
		return (0);
	if (!ft_isalpha(name[0]) && name[0] != '_')
		return (0);
	i = 1;
	while (name[i] && name[i] != '=')
	{
		if (!ft_isalnum(name[i]) && name[i] != '_')
			return (0);
		i++;
	}
	return (1);
}

void	sort_index(char **env, int *index, int size)
{
	int	i;
	int	j;
	int	aux;
	int	len;

	i = -1;
	while (++i < size - 1)
	{
		j = i;
		while (++j < size)
		{
			if (ft_strlen(env[index[i]]) > ft_strlen(env[index[j]]))
				len = ft_strlen(env[index[i]]);
			else
				len = ft_strlen(env[index[j]]);
			if (ft_strncmp(env[index[i]], env[index[j]], len) > 0)
			{
				aux = index[i];
				index[i] = index[j];
				index[j] = aux;
			}
		}
	}
}

void	init_export_index(int *index, int size)
{
	int	i;

	i = 0;
	while (i < size)
	{
		index[i] = i;
		i++;
	}
}#include "minishell.h"

static void	print_one_env(char *var)
{
	int	i;

	i = 0;
	write(1, "declare -x ", 11);
	while (var[i] && var[i] != '=')
	{
		write(1, &var[i], 1);
		i++;
	}
	if (var[i] == '=')
	{
		write(1, "=\"", 2);
		i++;
		while (var[i])
		{
			write(1, &var[i], 1);
			i++;
		}
		write(1, "\"", 1);
	}
	write(1, "\n", 1);
}

void	print_env(char **env, int *index, int size)
{
	int	i;

	i = 0;
	while (i < size)
	{
		print_one_env(env[index[i]]);
		i++;
	}
}
#include "minishell.h"

static short int	check_update_env(char ***env, char **args)
{
	int	arg_i;
	short int	had_error;

	arg_i = 1;
	had_error = 0;
	while (args[arg_i])
	{
		if (!is_valid_name(args[arg_i]))
		{
			fprintf(stderr, "minishell: export: `%s': not a valid identifier\n",
				args[arg_i]);
			had_error = -1;
			arg_i++;
			continue ;
		}
		if (update_or_add_env(env, args[arg_i]) == -1)
			return (-1);
		arg_i++;
	}
	return (had_error);
}

short int	custom_export(char ***env, char **args)
{
	int	size;
	int	*index;

	size = env_size(*env);
	index = malloc(sizeof(int) * size);
	if (!index)
		return (1);
	init_export_index(index, size);
	sort_index(*env, index, size);
	if (!args[1])
		print_env(*env, index, size);
	else
	{
		if (check_update_env(env, args) == -1)
		{
			free(index);
			return (1);
		}
	}
	free(index);
	return (0);
}
#include "minishell.h"
#include "../libft/libft.h"

static int	compare_var_names(char *a, char *b, int size)
{
	if (ft_strncmp(a, b, size) == 0
		&& (a[size] == '=' || a[size] == '\0'))
		return (1);
	return (0);
}

static int	replace_env(char ***env, int i, char *arg)
{
	free((*env)[i]);
	(*env)[i] = ft_strdup(arg);
	return (0);
}

static int	add_env_var(char ***env, char *arg)
{
	if (env_add(env, arg) == -1)
		return (-1);
	return (0);
}

static int	update_existing_env(char ***env, char *arg, int i, int size)
{
	if (arg[size] == '=')
		return (replace_env(env, i, arg));
	return (0);
}

int	update_or_add_env(char ***env, char *arg)
{
	int	i;
	int	size;
	int	found;

	i = 0;
	found = 0;
	size = 0;
	while (arg[size] && arg[size] != '=')
		size++;
	while ((*env)[i])
	{
		if (compare_var_names((*env)[i], arg, size))
		{
			update_existing_env(env, arg, i, size);
			found = 1;
			break ;
		}
		i++;
	}
	if (!found)
		return (add_env_var(env, arg));
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   custom_echo.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kievaughn <kievaughn@student.42.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/13 18:15:55 by dimendon          #+#    #+#             */
/*   Updated: 2025/07/01 17:28:56 by kievaughn        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "../libft/libft.h"

static int	skip_n_flags(char **arg, int start)
{
	int	i;
	int	j;
	int	all_n;

	i = start;
	while (arg[i] && ft_strncmp(arg[i], "-n", 2) == 0)
	{
		j = 1;
		all_n = 1;
		while (arg[i][j])
		{
			if (arg[i][j] != 'n')
			{
				all_n = 0;
				break ;
			}
			j++;
		}
		if (!all_n)
			break ;
		i++;
	}
	return (i);
}

/*
** Writes one argument for echo, handling $?.
*/
static int	write_echo_arg(const char *arg)
{
	char	*code;

	if (ft_strncmp(arg, "$?", 3) == 0)
	{
		code = ft_itoa(last_exit_code);
		if (!code)
			return (1);
		write(1, code, ft_strlen(code));
		free(code);
	}
	else
		write(1, arg, ft_strlen(arg));
	return (0);
}

static int	print_echo_args(char **arg, int start)
{
	int	i;

	i = start;
	while (arg[i])
	{
		if (write_echo_arg(arg[i]))
			return (1);
		if (arg[i + 1])
			write(1, " ", 1);
		i++;
	}
	return (0);
}

short int	custom_echo(char **arg)
{
	int		i;
	int		flag_newline;

	i = 1;
	flag_newline = 1;
	i = skip_n_flags(arg, i);
	if (i > 1)
		flag_newline = 0;
	if (print_echo_args(arg, i))
		return (1);
	if (flag_newline)
		write(1, "\n", 1);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   custom_unset.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kievaughn <kievaughn@student.42.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/18 16:51:10 by dimendon          #+#    #+#             */
/*   Updated: 2025/07/01 17:29:17 by kievaughn        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "../libft/libft.h"

static void remove_var(char ***envp, const char *var)
{
    int i;
    int pos;

    i = 0;
    pos = 0;
    while ((*envp)[i])
    {
    if (ft_strncmp((*envp)[i], var, ft_strlen(var)) == 0
        && (*envp)[i][ft_strlen(var)] == '=')
        {
            free((*envp)[i]);
            pos = i;
            while ((*envp)[pos + 1])
            {
                (*envp)[pos] = (*envp)[pos + 1];
                pos++;
            }
            (*envp)[pos] = NULL;
        }
        else
            i++;
    }
}

short int custom_unset(char ***envp, char **args)
{
    int i;

    i = 1;
    while (args[i])
    {
        remove_var(envp, args[i]);
        i++;
    }
    return 0;
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   custom_exit.c                                      :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/13 18:15:52 by dimendon          #+#    #+#             */
/*   Updated: 2025/06/23 19:53:56 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "../libft/libft.h"

short int custom_exit(char **args)
{
    long long value;

    if (args[1] && args[2])
    {
        fprintf(stderr, "exit: too many arguments\n");
        last_exit_code = 1;
        return (1);
    }
    printf("exit\n");
    if (args[1])
    {
        if (!ft_atoany(args[1], &value))
        {
            fprintf(stderr, "exit: %s: numeric argument required\n", args[1]);
            exit(2);
        }
        exit((unsigned char)value);
    }

    exit(last_exit_code);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   custom_cd.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/13 18:15:57 by dimendon          #+#    #+#             */
/*   Updated: 2025/06/25 14:40:24 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "../libft/libft.h"

static char	*get_cd_target(char **envp, char **args)
{
	char	*oldpwd;
	char	*home;

	oldpwd = NULL;
	home = NULL;
	if (args[1] && ft_strncmp(args[1], "-", 2) == 0)
	{
		oldpwd = get_env_value(envp, "OLDPWD");
		if (!oldpwd)
			fprintf(stderr, "cd: OLDPWD not set\n");
		else
			printf("%s\n", oldpwd);
		return (oldpwd);
	}
	if (!args[1] || ft_strlen(args[1]) == 0)
	{
		home = get_env_value(envp, "HOME");
		if (!home)
			fprintf(stderr, "cd: HOME not set\n");
		return (home);
	}
	return (args[1]);
}

static short int	update_pwd_vars(char ***envp, const char *oldpwd,
						const char *newpwd)
{
	char		*old_str;
	char		*new_str;
	char		*export_args[4];
	short int	res;

	old_str = ft_strjoin("OLDPWD=", oldpwd);
	new_str = ft_strjoin("PWD=", newpwd);
	export_args[0] = "export";
	export_args[1] = old_str;
	export_args[2] = new_str;
	export_args[3] = NULL;
	res = 1;
	if (old_str && new_str)
		res = custom_export(envp, export_args);
	free(old_str);
	free(new_str);
	return (res);
}

static short int	change_and_get_pwds(const char *target, char **oldpwd,
						char **newpwd)
{
	*oldpwd = getcwd(NULL, 0);
	if (!*oldpwd)
	{
		perror("getcwd");
		return (1);
	}
	if (chdir(target) != 0)
	{
		perror("cd");
		free(*oldpwd);
		*oldpwd = NULL;
		return (1);
	}
	*newpwd = getcwd(NULL, 0);
	if (!*newpwd)
	{
		perror("getcwd");
		free(*oldpwd);
		*oldpwd = NULL;
		return (1);
	}
	return (0);
}

short int	custom_cd(char ***envp, char **args)
{
	char		*target;
	char		*oldpwd;
	char		*newpwd;
	short int	ret;

	target = NULL;
	oldpwd = NULL;
	newpwd = NULL;
	ret = 0;
	if (args[1] && args[2])
		return (fprintf(stderr, "cd: too many arguments\n"), 1);
	target = get_cd_target(*envp, args);
	if (!target)
		return (1);
	ret = change_and_get_pwds(target, &oldpwd, &newpwd);
	if (ret)
		return (ret);
	ret = update_pwd_vars(envp, oldpwd, newpwd);
	free(oldpwd);
	free(newpwd);
	return (ret);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   custom_pwd.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/13 18:15:48 by dimendon          #+#    #+#             */
/*   Updated: 2025/06/13 18:20:46 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "../libft/libft.h"

short int custom_pwd()
{
    char *cwd;

    cwd = getcwd(NULL, 0);
    if (!cwd)
    {
        perror("pwd");
        return (1);
    }

    printf("%s\n", cwd);
    free(cwd);
    return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   custom_env.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kievaughn <kievaughn@student.42.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/18 16:41:47 by dimendon          #+#    #+#             */
/*   Updated: 2025/07/01 14:56:49 by kievaughn        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "../libft/libft.h"

short int custom_env(char **envp)
{
    int i;

    if (!envp)
        return (1);

    i = 0;
    while (envp[i] != NULL)
    {
        printf("%s\n", envp[i]);
        i++;
    }

    return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   env_lookup.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kievaughn <kievaughn@student.42.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/04 13:41:38 by dimendon          #+#    #+#             */
/*   Updated: 2025/07/01 18:08:13 by kievaughn        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "../libft/libft.h"

char *get_env_value(char **envp, const char *name)
{
    int i;
    size_t len;
	
	len = ft_strlen(name);
	i = 0;
    while (envp[i])
    {
        if (ft_strncmp(envp[i], name, len) == 0 && envp[i][len] == '=')
            return (envp[i] + len + 1);
        i++;
    }
    return (NULL);
}

static char **split_path_dirs(char **envp, const char *name)
{
    char *value;
	
	value = get_env_value(envp, name);
    if (!value)
        return (NULL);
    return (ft_split(value, ':'));
}

char *get_path(char **envp, char **cmd)
{
    int i;
    char **paths;
    char *finalpath;
    char *tmp;

    finalpath = NULL;
    paths = split_path_dirs(envp, "PATH");
    if (!paths)
        return NULL;

    i = 0;
    while (paths[i])
    {
        tmp = NULL;
        tmp = ft_strcatrealloc(tmp, paths[i]);
        tmp = ft_strcatrealloc(tmp, "/");
        tmp = ft_strcatrealloc(tmp, cmd[0]);
        if (tmp && access(tmp, F_OK | X_OK) == 0)
        {
            finalpath = ft_strdup(tmp);
            free(tmp);
            break;
        }
        free(tmp);
        i++;
    }
    i = 0;
    while (paths[i])
        free(paths[i++]);
    free(paths);

    return (finalpath);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   env_utils.c                                        :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kievaughn <kievaughn@student.42.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/04 13:41:07 by dimendon          #+#    #+#             */
/*   Updated: 2025/07/01 18:08:28 by kievaughn        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "../libft/libft.h"

int env_size(char **env)
{
    int size;
    
    size = 0;
    while (env[size])
        size++;
        
    return (size);
}

char **env_realloc_add(char **env)
{
    int size;
    char **new_env;
    int i;

    size = env_size(env);
    new_env = malloc(sizeof(char *) * (size + 2));
    if (!new_env)
        return (NULL);

    i = 0;
    while (i < size)
    {
        new_env[i] = env[i];
        i++;
    }
    new_env[size] = NULL;
    free(env);
    return (new_env);
}

static int	add_first_env(char ***env_ptr, const char *new_var)
{
	char	**new_env;

	new_env = malloc(sizeof(char *) * 2);
	if (!new_env)
		return (-1);
	new_env[0] = ft_strdup(new_var);
	if (!new_env[0])
	{
		free(new_env);
		return (-1);
	}
	new_env[1] = NULL;
	*env_ptr = new_env;
	return (0);
}

int	env_add(char ***env_ptr, const char *new_var)
{
	char	**env;
	int		env_size;
	char	**new_env;

	env = *env_ptr;
	if (!env)
		return (add_first_env(env_ptr, new_var));
	env_size = 0;
	while (env[env_size])
		env_size++;
	new_env = env_realloc_add(env);
	if (!new_env)
		return (-1);
	new_env[env_size] = ft_strdup(new_var);
	if (!new_env[env_size])
	{
		free(new_env);
		return (-1);
	}
	new_env[env_size + 1] = NULL;
	*env_ptr = new_env;
	return (0);
}

char **copy_envp(char **envp)
{
    char **env;
    int size;
    int i;

    i = -1;
    size = 0;
    while (envp[size])
        size++;
    env = malloc(sizeof(char *) * (size + 1));
    if (!env)
        return (NULL);
    while (++i < size)
    {
        env[i] = ft_strdup(envp[i]);
        if (!env[i])
        {
            while (--i >= 0)
                free(env[i]);
            free(env);
            return (NULL);
        }
    }
    env[size] = NULL;
    return (env);
}


/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kievaughn <kievaughn@student.42.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/04 13:41:29 by dimendon          #+#    #+#             */
/*   Updated: 2025/07/01 15:25:44 by kievaughn        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */


#include "minishell.h"
#include "libft/libft.h"
#include <limits.h>

int last_exit_code = 0;

void sigint_handler(int signum)
{
    (void)signum;

    write(STDOUT_FILENO, "\n", 1);

    rl_on_new_line();
//    rl_replace_line("", 0);
    rl_redisplay();
}

int main(int argc, char **argv, char **envp)
{
    (void)argc;
    (void)argv;

    char *line;
    char **env;
    
    env = copy_envp(envp);
    signal(SIGINT, sigint_handler);
    signal(SIGQUIT, SIG_IGN);
    while (1)
    {
        line = readline("minishell$ ");
        if (line == NULL)
            break;

        if (*line)
            add_history(line);

        process_command(&env, line);
        free(line);
    }
    free_cmd(env);
    return (0);
}

/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cleanup.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: kievaughn <kievaughn@student.42.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/04 17:35:05 by dimendon          #+#    #+#             */
/*   Updated: 2025/07/01 18:11:06 by kievaughn        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"

void free_cmd(char **cmd)
{
    int i;

    i = 0;
    if (!cmd)
        return;
    while (cmd[i])
    {
        free(cmd[i]);
        i++;
    }
    free(cmd);
}#include "minishell.h"
#include "../libft/libft.h"


static size_t count_segments(const char *line)
{
    size_t i = 0;
    size_t count = 1;
    char quote = 0;

    while (line && line[i])
    {
        if (!quote && (line[i] == '\'' || line[i] == '"'))
            quote = line[i];
        else if (quote && line[i] == quote)
            quote = 0;
        else if (!quote && line[i] == '|')
            count++;
        i++;
    }
    return count;
}

static void handle_quote_state(char c, char *quote)
{
    if (!*quote && (c == '\'' || c == '"'))
        *quote = c;
    else if (*quote && c == *quote)
        *quote = 0;
}

char **split_pipes(const char *line)
{
    size_t i;
    size_t start;
    size_t seg;
    char quote;
    char **arr;
    
    i = 0;
    start = 0;
    seg = 0;
    quote = 0;
    arr = malloc(sizeof(char *) * (count_segments(line) + 1));
    if (!arr)
        return NULL;
    while (line && line[i])
    {
        handle_quote_state(line[i], &quote);
        if (!quote && line[i] == '|')
        {
            arr[seg++] = ft_substr(line, start, i - start);
            start = i + 1;
        }
        i++;
    }
    arr[seg++] = ft_substr(line, start, i - start);
    arr[seg] = NULL;
    return arr;
}
#include "minishell.h"
#include "../libft/libft.h"

static char    *append_exit_code(char *result, int *i, char *str, int *handled)
{
    char *exit_code_str;
    char *tmp;

    *handled = 0;

    if (!(str[*i] == '$' && str[*i + 1] == '?'))
        return (result);

    *handled = 1;

    if (!(result = append_literal(result, str, 0, *i)))
        return (NULL);

    exit_code_str = ft_itoa(last_exit_code);
    if (!exit_code_str)
        return (free(result), NULL);

    tmp = ft_strcatrealloc(result, exit_code_str);
    free(exit_code_str);
    if (!tmp)
        return (free(result), NULL);

    result = tmp;
    *i += 2;
    return (result);
}

char    *build_expanded_str(char *str, char **envp)
{
    int     i = 0;
    int     start = 0;
    char    *result = NULL;
    int     handled;

    while (str[i])
    {
        if (str[i] == '$')
        {
            if ((result = append_exit_code(result, &i, str, &handled)) && handled)
            {
                start = i;
                continue;
            }
            if (ft_isalnum(str[i + 1]))
            {
                if (!(result = append_literal(result, str, start, i)))
                    return (NULL);
                if (!(result = append_expanded_var(result, str, &i, envp)))
                    return (NULL);
                start = i;
                continue;
            }
        }
        i++;
    }
    if (!(result = ft_strcatrealloc(result, str + start)))
        return (NULL);

    return (result);
}
#include "minishell.h"
#include "../libft/libft.h"

static int  part_count(char *tok)
{
    int i = 0;
    int start = 0;
    int count = 0;

    while (tok[i])
    {
        if (tok[i] == '>' || tok[i] == '<')
        {
            if (i - start > 0)
                count++;
            if (tok[i] == '>' && tok[i + 1] == '>')
            {
                count++;
                i += 2;
            }
            else
            {
                count++;
                i++;
            }
            start = i;
        }
        else
            i++;
    }
    if (i - start > 0)
        count++;
    return (count);
}

static int  total_parts(char **arr)
{
    int total = 0;
    int i = 0;

    while (arr && arr[i])
    {
        total += part_count(arr[i]);
        i++;
    }
    return (total);
}

char    **split_redirs(char **arr)
{
    char    **out;
    int     i;
    int     j;
    int     start;
    int     idx;

    out = malloc(sizeof(char *) * (total_parts(arr) + 1));
    if (!out)
        return (free_cmd(arr), NULL);
    idx = 0;
    i = 0;
    while (arr[i])
    {
        j = 0;
        start = 0;
        while (arr[i][j])
        {
            if (arr[i][j] == '>' || arr[i][j] == '<')
            {
                if (j - start > 0)
                    out[idx++] = ft_substr(arr[i], start, j - start);
                if (arr[i][j] == '>' && arr[i][j + 1] == '>')
                {
                    out[idx++] = ft_strdup(">>");
                    j += 2;
                }
                else
                {
                    char    op[2];

                    op[0] = arr[i][j];
                    op[1] = '\0';
                    out[idx++] = ft_strdup(op);
                    j++;
                }
                start = j;
            }
            else
                j++;
        }
        if (j - start > 0)
            out[idx++] = ft_substr(arr[i], start, j - start);
        free(arr[i]);
        i++;
    }
    out[idx] = NULL;
    free(arr);
    return (out);
}
#include "minishell.h"
#include "../libft/libft.h"

void     remove_quotes(char *str)
{
        size_t  i;
        size_t  j;
        char    quote;

        i = 0;
        j = 0;
        quote = 0;
        while (str[i])
        {
                if (!quote && (str[i] == '"' || str[i] == '\''))
                {
                        quote = str[i++];
                        while (str[i] && str[i] != quote)
                                str[j++] = str[i++];
                        if (str[i] == quote)
                                i++;
                        quote = 0;
                }
                else
                        str[j++] = str[i++];
        }
        str[j] = '\0';
}

char *append_literal(char *result, char *str, int start, int i)
{
    char *tmp;

    str[i] = '\0';
    tmp = ft_strcatrealloc(result, str + start);
    str[i] = '$';
    if (!tmp)
    {
        free(result);
        return (NULL);
    }
    return (tmp);
}

char *expand_var(char *str, int *var_len)
{
    int i = 0;

    while (str[i] != '\0' && ft_isalnum(str[i]))
        i++;
    *var_len = i;
    if (i > 0)
        return (ft_substr(str, 0, i));
    return (NULL);
}

char    *append_expanded_var(char *result, char *str, int *i, char **envp)
{
    int var_len;
    char *var;
    char *value;
    char *tmp;

    var_len = 0;
    var = expand_var(&str[*i + 1], &var_len);
    value = get_env_value(envp, var);
    if (!value)
        value = "";
    tmp = ft_strcatrealloc(result, value);
    free(var);
    if (!tmp)
        return (NULL);
    *i += var_len + 1;
    return (tmp);
}
#include "minishell.h"
#include "../libft/libft.h"

static size_t	token_count(char const *s, char c)
{
        size_t  i;
        size_t  count;
        char    quote;
		
        i = 0;
        count = 0;
        while (s[i])
        {
                while (s[i] == c)
                        i++;
                if (!s[i])
                        break ;
                count++;
                quote = 0;
                while (s[i])
                {
                        if (!quote && (s[i] == '"' || s[i] == '\''))
                        {
                                quote = s[i++];
                                while (s[i] && s[i] != quote)
                                        i++;
                                if (s[i] == quote)
                                        i++;
                                quote = 0;
                                continue ;
                        }
                        if (!quote && s[i] == c)
                                break ;
                        i++;
                }
        }
        return (count);
}

static void	free_arr(char **arr, int i)
{
	while (i-- > 0)
		free(arr[i]);
	free(arr);
}

static size_t   next_c(char *s, char c)
{
    size_t  len;
	char    quote;

    len = 0;
    quote = 0;
    while (s[len])
    {
        if (!quote && (s[len] == '"' || s[len] == '\''))
        {
            quote = s[len++];
            while (s[len] && s[len] != quote)
                len++;
            if (s[len] == quote)
                len++;
            quote = 0;
                continue ;
        }
        if (!quote && s[len] == c)
                break ;
        len++;
    }
    return (len);
}

char    **tokenize_command(char const *s, char c, char **envp)
{
        char    **arr;
        int             i;
        size_t  len;

        if (!s)
                return (NULL);
        arr = (char **)malloc((token_count(s, c) + 1) * sizeof(char *));
        if (!arr)
                return (NULL);
        i = 0;
        while (*s)
        {
                while (*s == c)
                        s++;
                if (!*s)
                        break ;
                len = next_c((char *)s, c);
                arr[i] = ft_substr((char *)s, 0, len);
                if (!arr[i])
                        return (free_arr(arr, i), NULL);
                if(arr[i][0] != '\'')
                {
                        char *expanded = build_expanded_str(arr[i], envp);
                        free(arr[i]);
                        arr[i] = expanded;
                }
                remove_quotes(arr[i]);
                i++;
                s += len;
        }
        arr[i] = NULL;
        return (split_redirs(arr));
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   handlers.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: dimendon <dimendon@student.hive.fi>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/06/13 18:22:36 by dimendon          #+#    #+#             */
/*   Updated: 2025/06/25 13:35:04 by dimendon         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "minishell.h"
#include "libft/libft.h"
#include <errno.h>

int execute_command(char *path, char **cmd, char **envp)
{
    pid_t pid;
    int status;

    pid = fork();
    if (pid == 0)
    {
        execve(path, cmd, envp);
        perror("execve");
        _exit(127);
    }
    else if (pid > 0)
    {
        if (waitpid(pid, &status, 0) == -1)
        {
            perror("waitpid");
            return 1;
        }
        if (WIFEXITED(status))
            return WEXITSTATUS(status);
        else if (WIFSIGNALED(status))
            return 128 + WTERMSIG(status);
        else
            return 1;
    }
    else
    {
        perror("fork");
        return 1;
    }
}


